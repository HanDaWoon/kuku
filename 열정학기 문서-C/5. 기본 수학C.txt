5.1. 산 등반 문제
이번장에서는 기본수학 중 하나인 계단오르기 문제를 풀어보겠습니다.

M미터 되는 산을 오를때
하루에 최대 A만큼 올라갈 수 있고,
무조건 잠을 자기위해 B만큼 내려가 텐트를 친다.
산 정상에 도착하는데 최소 며칠이 걸리는지 구하시오.
A B M 순으로 입력을 받고 모두 양의 정수이다.
(0 < A < 100, 0 <= B < A, 0 < M < 8848)
[
    M은 산의 높이이면서, 산정상까지의 거리가 될 수 있습니다.
    M에서 A만큼 빼고 B만큼 더하는 것을 반복하다가
    M == 산정상까지의 거리가 0이하가 된다면
    산 정상에 도달했다는 것이므로 그때의 반복횟수를 출력한다.

    #include <stdio.h>
    int main(void)
    {
        int A, B, M;        // 입력을 받기위한 변수들을 선언
        int day = 0;        // 산 정상에 도달하는데 걸리는 날짜를 저장할 변수를 선언
        scanf("%d %d %d", &A, &B, &M);
        while (M > 0)       // 산 정상에 도달할때까지 반복
        {
            M -= A;         // 산 정상까지의 거리에서 A만큼 빼고
            day++;          // 하루가 지났으므로 day를 1 증가
            if (M <= 0)     // 산 정상에 도달했다면
                break;      // 반복문을 빠져나간다.
            M += B;         // 산 정상까지의 거리에서 B만큼 더한다.
        }
        printf("%d", day);
        return 0;
    }
]
실행결과는 다음과 같습니다.
(예를들어 10 4 20을 입력)
3

5.2. 소수 구하기
이번장에서는 기본수학 중 하나인 소수를 구하는 문제를 풀어보겠습니다.
소수(prime number)란 1과 자기자신으로만 나누어 떨어지는 수를 말합니다.
예를들어 2, 3, 5, 7, 11, 13, ... 등이 소수입니다.

    5.2.1 O(n^2) 소수 판별하기
        먼저 우리가 소수를 구하는 방법을 생각해보겠습니다.
        소수는 1과 자기자신으로만 나누어 떨어지는 수이므로
        말 그대로 1과 자기자신을 제외한 사이의 모든 수를
        하나씩 나누어 보고 나누어 떨어지는지 확인하면 됩니다.
        이를 코드로 표현하면 다음과 같습니다.
        [
            #include <stdio.h>
            int main(void)
            {
                int n;      // 입력을 받기위한 변수를 선언
                int i;      // 반복문을 위한 변수를 선언
                int flag = 1;   // 소수인지 아닌지를 판단하기 위한 변수를 선언
                scanf("%d", &n);
                for (i = 2; i < n; i++)     // 1과 자기자신을 제외한 모든 수를
                {                           // 하나씩 나누어 보고
                    if (n % i == 0)         // 나누어 떨어지면
                    {
                        flag = 0;           // 소수가 아니므로 flag를 0으로 바꾼다.
                        break;              // 반복문을 빠져나간다.
                    }
                }
                if (flag == 1)              // flag가 1이면
                    printf("소수입니다.");   // 소수이므로 "소수입니다."를 출력한다.
                else                        // flag가 0이면
                    printf("소수가 아닙니다.");  // 소수가 아니므로 "소수가 아닙니다."를 출력한다.
                return 0;
            }
        ]
        실행결과는 다음과 같습니다.
        (예를들어 7을 입력)
        소수입니다.

        이 코드는 O(n^2)의 시간복잡도를 가지고 있습니다.
        시간 복잡도의 개념은 간단하게 입력 n에따라 연산횟수 == 걸린시간을
        차수로 표현한 것입니다.

    5.2.2 O(n*sqrt(n)) 소수 판별하기
        5.2.1.의 경우 1과 자기자신을 제외한 모든 수를 하나씩 나누어 보고
        나누어 떨어지는지 확인해서 소수를 판별하였습니다.
        이런 방식 보다 더 적은 연산횟수로 소수를 판별할 수 있는 방법이 있을까요?

        1과 자기자신을 제외한 모든 수를 하나씩 나누는 것이 아니라
        1과 자기자신의 제곱근 사이의 모든 수를 하나씩 나누어 보고
        나누어 떨어지는지 확인합니다.
        제곱 이상의 수로 나누어 떨어지는 수는
        애초에 제곱근 이하의 수로 나누어 떨어지기 때문입니다.

        이를 코드로 표현하면 다음과 같습니다.
        [
            #include <stdio.h>
            #include <math.h>
            int main(void)
            {
                int n;      // 입력을 받기위한 변수를 선언
                int i;      // 반복문을 위한 변수를 선언
                int flag = 1;   // 소수인지 아닌지를 판단하기 위한 변수를 선언
                scanf("%d", &n);
                for (i = 2; i <= sqrt(n); i++)  // 1과 자기자신의 제곱근 사이의 모든 수를
                {                               // 하나씩 나누어 보고
                    if (n % i == 0)             // 나누어 떨어지면
                    {
                        flag = 0;               // 소수가 아니므로 flag를 0으로 바꾼다.
                        break;                  // 반복문을 빠져나간다.
                    }
                }
                if (flag == 1)                  // flag가 1이면
                    printf("소수입니다.");       // 소수이므로 "소수입니다."를 출력한다.
                else                            // flag가 0이면
                    printf("소수가 아닙니다.");  // 소수가 아니므로 "소수가 아닙니다."를 출력한다.
                return 0;
            }
        ]
        실행결과는 다음과 같습니다.
        (예를들어 7을 입력)
        소수입니다

        이 코드는 O(n*sqrt(n))의 시간복잡도를 가지고 있습니다.
        기존의 O(n^2)의 시간복잡도를 가지고 있던 코드보다
        *sqrt(n) 만큼의 연산횟수를 줄일 수 있습니다.

    5.2.3 O(n*log(log(n))) 소수 구하기
    더 빠르면서도 1부터 n까지 모든 수를 소수 판별하는
    획기적인 방법이 있다면 어떨까요?
    이 방법은 에라토스테네스의 체라는 방법입니다.

    에라토스테네스의 체는 다음과 같은 방법으로 소수를 구합니다.
    1. 2부터 n까지의 모든 수를 적는다.
    2. 아직 지우지 않은 수 중 가장 작은 수를 찾는다.
    3. 그 수는 소수이다.
    4. 그 수의 배수를 모두 지운다.
    5. 2번의 수가 sqrt(n)을 넘기기전까지 2번으로 돌아가 반복한다.

    이 방법을 코드로 표현하면 다음과 같습니다.
    [
        #include <stdio.h>
        #include <math.h>
        int main(void)
        {
            int n;      // 입력을 받기위한 변수를 선언
            int i, j;   // 반복문을 위한 변수를 선언
            int flag[1000001];  // 소수인지 아닌지를 판단하기 위한 배열을 선언

            scanf("%d", &n);

            for (i = 2; i <= n; i++)    // 2부터 n까지의 모든 수를
                flag[i] = 1;            // flag 배열에 1로 초기화한다.
            
            for (i = 2; i <= sqrt(n); i++)  // 2부터 sqrt(n)까지의 모든 수를
            {                               // 하나씩 나누어 보고
                if (flag[i] == 1)           // flag가 1이면 소수이므로
                {
                    for (j = i * 2; j <= n; j += i) // 그 수의 배수를 모두 지운다.
                        flag[j] = 0;
                }
            }
            for (i = 2; i <= n; i++)    // 2부터 n까지의 모든 수를
            {                           // 하나씩 출력하면서
                if (flag[i] == 1)       // flag가 1이면
                    printf("%d ", i);   // 소수이므로 출력한다.
            }
            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어 50을 입력)
    2 3 5 7 11 13 17 19 23 29 31 37 41 43 47

    이 코드는 O(n*log(log(n)))의 시간복잡도를 가지고 있습니다.
    기존의 O(n*sqrt(n))의 시간복잡도를 가지고 있던 코드보다
    선형O(n)에 가까운 시간복잡도를 가지고 있습니다.

    그럼에도 특정 구간의 모든 소수를 구할 수 있기 때문에 많이 사용되는 방법입니다.

5.3. 큰수의 덧셈
수많은 자료형과 연산자들이 있지만 대부분의 언어는 지정 타입들의
자릿수 한계로 연산의 범위가 제한 되어 있습니다.
엄청난 자리수를 연산하는 일은 그다지 많지 않지만
어떤 경우에는 필요할때도 있을 수 있습니다.
    5.3.1. 큰수의 덧셈
        큰수의 덧셈을 구현하는 방법은 다음과 같습니다.
        1. 두 수를 문자열로 입력받는다.
        2. 두 수의 길이를 비교하여 짧은 수의 앞에 0을 채운다.
        3. 두 수의 각 자리수를 더한다.
        4. 만약 올림수가 존재한다면 자리수를 올림한다.(올림한 수와 같이 더한다.)
        5. 결과를 출력한다.

        이 방법을 코드로 표현하면 다음과 같습니다.
        [
            #include<stdio.h>
            #include<string.h>

            char a[1000001], b[1000001];
            int C[1000002];

            int main(){
                int A, B, idx=0;
                int carry=0, s1, s2;

                scanf("%s %s", a, b);
                s1=strlen(a);
                s2=strlen(b);

                while((s1 > 0) || (s2 > 0) || (carry > 0)){
                    if(s1 > 0){
                        A = a[--s1] - '0';
                    }
                    if(s2 > 0){
                        B = b[--s2] - '0';
                    }
                    C[idx++] = (A + B + carry) % 10;        //남은 것은 자리수에 맞춰서 넣어준다.
                    carry = (A + B + carry) > 9 ? 1 : 0;    //carry는 각자리수의 합이 10이 넘으면 1, 아니면 0
                    A = B = 0;                              //A, B를 0으로 초기화

                }
                for(int i= idx - 1; i >= 0; i--)
                        printf("%d", C[i]);

                return 0;
            }
        ]
        실행결과는 다음과 같습니다.
        (예를들어
        123456789123456789123456789
        987654321987654321987654321
        을 입력)
        1111111111111111111111111110

        이 코드는 O(n)의 시간복잡도를 가지고 있습니다.(n은 두 수의 최대 자릿수)
        이 코드는 두 수가 최대 100만 자리까지 가능합니다.

    5.3.2. 큰수의 뺄셈
        큰수의 뺄셈을 구현하는 방법은 다음과 같습니다.
        1. 두 수를 문자열로 입력받는다.
        2. 두 수의 길이를 비교하여 짧은 수의 앞에 0을 채운다.
        3. 두 수의 각 자리수를 뺀다.
        4. 만약 뺀 결과가 음수라면 자리수를 내린다.
        5. 결과를 출력한다.
        (단, 두 수 중 큰 수a를 먼저 입력받고 작은 수b를 입력받고 a-b를 출력한다.)

        이 방법을 코드로 표현하면 다음과 같습니다.
        [
            #include<stdio.h>
            #include<string.h>

            char a[1000001], b[1000001];
            int C[1000002];

            int main(){
                int A, B, idx=0;
                int carry=0, s1, s2;

                scanf("%s %s", a, b);
                s1=strlen(a);
                s2=strlen(b);

                while((s1 > 0) || (s2 > 0) || (carry > 0)){
                    if(s1 > 0){
                        A = a[--s1] - '0';
                    }
                    if(s2 > 0){
                        B = b[--s2] - '0';
                    }
                    C[idx] = (A - B - carry) % 10;        //남은 것은 자리수에 맞춰서 넣어준다.
	                C[idx++] = C[idx] < 0 ? C[idx] + 10 : C[idx]; //음수면 10을 더해준다.
                    carry = (A - B - carry) < 0 ? 1 : 0;    //carry는 각자리수의 합이 0보다 작으면 1, 아니면 0
                    A = B = 0;                              //A, B를 0으로 초기화

                }
                for(int i= idx - 1; i >= 0; i--)
                        printf("%d", C[i]);

                return 0;
            }
        ]
        실행결과는 다음과 같습니다.
        (예를들어
	    987654321987654321987654321
	    123456789123456789123456789
        을 입력)
        864197532864197532864197532

        이 코드는 O(n)의 시간복잡도를 가지고 있습니다.(n은 두 수의 최대 자릿수)
        이 코드는 두 수가 최대 100만 자리까지 가능합니다.

5.4. OX퀴즈 문제(8958번)
Asia Regional - Seoul 2005 A번
"OOXXOXXOOO"와 같은 OX퀴즈의 결과가 있다.
O는 문제를 맞은 것이고, X는 문제를 틀린 것이다.
문제를 맞은 경우 그 문제의 점수는 그 문제까지 연속된 O의 개수가 된다.
예를 들어, 10번 문제의 점수는 3이 된다.
예를 들어 "OOXXOXXOOO"의 점수는 1+2+0+0+1+0+0+1+2+3 = 10점이다.
OX퀴즈의 결과가 주어졌을 때, 점수를 구하는 프로그램을 작성하시오.

OX퀴즈 문제를 풀기 위해서는 다음과 같은 방법을 사용합니다.
1. OX퀴즈의 결과를 문자열로 입력받는다.
2. 문자열의 길이만큼 반복문을 돌린다.
3. 만약 문자열의 i번째가 O라면, cnt를 1 증가시키고, sum에 cnt를 더한다.
4. 만약 문자열의 i번째가 X라면, cnt를 0으로 초기화한다.
5. sum을 출력한다.
(단, 횟수 n은 0 < n < 50, 문자열a의 길이는 0 < a < 100001)
        
이 방법을 코드로 표현하면 다음과 같습니다.
[
    #include<stdio.h>
    #include<string.h>


    int main(){
        char a[100001];
        int n, sum, cnt;
        scanf("%d", &n);

        for(int i=0; i<n; i++){
            sum = 0;
            cnt = 0;
            scanf("%s", a);
            for(int j=0; j<strlen(a); j++){
                if(a[j] == 'O'){
                    cnt++;
                    sum += cnt;
                }
                else{
                    cnt = 0;
                }
            }
            printf("%d\n", sum);
        }
        return 0;
    }
]
실행결과는 다음과 같습니다.
(예를들어)
5 
OOXXOXXOOO
OOXXOOXXOO
OXOXOXOXOXOXOX
OOOOOOOOOO
OOOOXOOOOXOOOOX
(를 입력)
10
9
7
55
30
        
이 코드는 O(n)의 시간복잡도를 가지고 있습니다.(n은 문자열의 길이)
이 코드는 문자열의 길이가 최대 10만 까지 가능합니다.

5.5. 행렬의 덧셈(2738번)
행렬의 덧셈과 뺄셈은 행렬의 같은 행, 같은 열의 값을 서로 더하거나 뺀다.
예를 들어, 2x2 행렬의 덧셈은 다음과 같이 계산한다.
[1 2] + [3 4] = [4 6]
[5 6]   [7 8]   [12 14]

행렬의 덧셈과 뺄셈은 행렬의 크기가 같아야 계산할 수 있기 때문에
두 행렬의 크기가 같은 경우만 입력으로 주어진다.

행렬의 행과 열의 주어주고 행렬 a 와 b를 입력받은 후,
a와 b를 더한 행렬을 출력하는 프로그램을 작성하시오.
(각 행과 각 열은 1000보다 작고 자연수이다.)
(행렬a 와 b의 각 원소는 공백으로 구분되어 있고 10억보다 작은 자연수이다.)

이 문제를 풀기 위해서는 다음과 같은 방법을 사용합니다.
1. 행렬의 행과 열의 개수를 입력받는다.
2. 행렬 행과 열의 개수 만큼 a와 b를 입력받는다.
3. a와 b를 더한 값을 출력한다.

이 방법을 코드로 표현하면 다음과 같습니다.
[
    #include<stdio.h>

    int b[1000][1000];
    int a[1000][1000];

    int main(){
        int n, m;
        scanf("%d %d", &n, &m);         //행과 열의 개수를 입력받는다.

        for(int i=0; i<n; i++){         //행렬 a 입력
            for(int j=0; j<m; j++){
                scanf("%d", &a[i][j]);
            }
        }

        for(int i=0; i<n; i++){         //행렬 b 입력
            for(int j=0; j<m; j++){
                scanf("%d", &b[i][j]);
            }
        }
        for(int i=0; i<n; i++){         //행렬 a와 b를 더한 값을 출력
            for(int j=0; j<m; j++){
                printf("%d ", a[i][j] + b[i][j]);
            }
            printf("\n");
        }
        return 0;
    }
]
실행결과는 다음과 같습니다.
(예를들어)
2 3
1 2 3
4 5 6
2 5 9
8 6 4
(를 입력)
3 7 12
12 11 10

이 코드는 O(n^2)의 시간복잡도를 가지고 있습니다.(n은 행렬의 행과 열의 개수)
이 코드는 행렬의 행과 열의 개수가 최대 1000 까지 가능합니다.
