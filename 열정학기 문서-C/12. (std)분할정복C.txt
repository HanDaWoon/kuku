12. 분할정복
분할정복(Divide and Conquer)은 문제를 작은 크기의 동일한 문제로
분할하여 해결한 다음, 분할된 문제의 해를 결합하여
원래 문제의 해를 구하는 알고리즘 설계 기법이다.
분할정복은 재귀 호출을 사용하여 구현한다.
분할정복은 다음과 같은 세 가지 조건을 만족해야 한다.

1. 문제를 작은 크기의 동일한 문제로 분할할 수 있다.
2. 문제를 분할할 수 없을 정도로 작아졌을 때, 문제를 해결할 수 있는
   충분히 간단한 방법이 있다.
3. 작은 문제의 해를 결합하여 원래 문제의 해를 구할 수 있다.

12.1. 제곱셈 문제
제곱셈 문제는 다음과 같다.
n^k를 계산하는 문제이다.

기존의 제곱셈은 O(k)의 시간이 걸리지만,
분할정복을 이용하면 O(logk)의 시간이 걸린다.

입력은 n과 k이다.(단, 1<n<100, 1<k<100)
제곱셈 문제를 분할정복으로 풀면 다음과 같다.
[
    #include <stdio.h>

    int power(int n, int k)
    {
        if (k == 0) return 1;
        if (k % 2 == 0) {
            int tmp = power(n, k / 2);
            return tmp * tmp;
        }
        return n * power(n, k - 1);
    }

    int main(){
        int n, k;
        scanf("%d %d", &n, &k);
        printf("%d", power(n, k));
        return 0;
    }
]
실행결과는 다음과 같다.
(예를들어 2 10을 입력)
1024

12.2. 피보나치 수열문제
이번에는 피보나치 수열을 분할정복으로 풀어봅시다.
피보나치 수열은 다음과 같습니다.
F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) (n>=2)

이를 행렬 연산으로 표현한다면
1 1
1 0 을 n-1번 곱하면 됩니다.

이유는 행렬곱셈의 원리를 생각하면 알수있습니다.
행렬곱셈은 각 행렬의 행과 열을 곱한 값들을 더한 값이기 때문에
f(n) f(n-1)      1 1          f(n+1) f(n)
f(n-1) f(n-2) 와 1 0 을 곱하면 f(n) f(n-1)이 나오게 됩니다.

행렬곱셈은 교횐법칙은 성립하지 않지만 결합법칙은 성립합니다.
그렇다면 하나씩 곱하지않고 반으로 분할하는 아이디어로 문제를 접근한다면

행렬 제곱셈의 시간복잡도로 피보나치 수열을 구할 수 있습니다.

[
    #include <stdio.h>

    void mult(int a[2][2], int b[2][2], int ans[2][2]) {
    	for (int i = 0; i < 2; i++) {
    		for (int j = 0; j < 2; j++) {
    			int save = 0;
    			for (int k = 0; k < 2; k++) {
    				save += (a[i][k] * b[k][j]);
    			}
    			ans[i][j] = save;
    		}
    	}
    }

    void copyarr(int a[2][2], int b[2][2]) {
    	for (int i = 0; i < 2; i++) {
    		for (int j = 0; j < 2; j++) {
    			b[i][j] = a[i][j];
    		}
    	}
    }

    void conq(int a[2][2], int b[2][2], int ans[2][2], int B) {
    	if (B == 1) {
    		copyarr(a, ans); //결과를 입력 값으로 리턴
    		return;
    	}

    	conq(a, b, ans, B / 2); //분할정복 O(logB) 결과값은 ans에 저장

    	copyarr(ans, b); // ans를 계산용저장값(b)에 저장
    	mult(b, b, ans); // ans에 b제곱 저장

    	if (B % 2 == 1) { // B가 홀수일때 b제곱(=ans) * a를 추가
    		copyarr(ans, b);
    		mult(b, a, ans);
    	}

    	copyarr(ans, b); // 최종결과값을 b로 빼돌리기
    }

    int main() {
    	int n, a[2][2] = { {1, 1},{1, 0} }, b[2][2] = { {1, 1},{1, 0} }, ans[2][2];

    	scanf("%d", &n);
    	conq(a, b, ans, n);

    	printf("%d", ans[0][1]);
    }
]
실행결과는 다음과 같다.
(예를들어 10을 입력)
55

12.3. 이분 탐색 문제
이번에는 이분탐색을 분할정복으로 풀어봅시다.
이분탐색은 정렬된 배열에서 특정값을 찾는 알고리즘입니다.
이분탐색은 O(logN)의 시간복잡도를 가지고 있습니다.
이분탐색은 분할정복을 이용하여 풀 수 있습니다.

이분탐색은 다음과 같은 과정을 거칩니다.
1. 배열의 중간값을 찾습니다.
2. 중간값이 찾는 값보다 크면 중간값보다 작은 값들은 무시합니다.
3. 중간값이 찾는 값보다 작으면 중간값보다 큰 값들은 무시합니다.
4. 1~3을 반복합니다.

입력값으로 배열의 크기 N과 찾는 값 K가 주어집니다.
그리고 임의의 정수 N개가 주어집니다.

배열 내에서 K가 몇 번째로 작은 수인지 출력하는 프로그램을 작성하세요.
만약 K가 배열에 없다면 -1을 출력하세요.

정렬하고 이분탐색을 하면 O(NlogN)으로 풀 수 있습니다.
[
    #include <stdio.h>
    #include <algorithm>

    int arr[1000000];

    int main() {
    	int n, k, l = 0, r, mid, ans = -1;

    	scanf("%d %d", &n, &k);
    	for (int i = 0; i < n; i++) {
    		scanf("%d", &arr[i]);
    	}

    	std::sort(arr, arr + n); //정렬

    	r = n - 1;
    	while (l <= r) {
    		mid = (l + r) / 2;
    		if (arr[mid] == k) {
    			ans = mid + 1;
    			break;
    		}
    		else if (arr[mid] > k) {
    			r = mid - 1;
    		}
    		else {
    			l = mid + 1;
    		}
    	}

    	printf("%d", ans);
    }
]
실행결과는 다음과 같다.
(예를들어
5 2
4 3 2 1 5
를 입력)
2

12.4 LIS (O(nlogn)) 문제
LIS는 Longest Increasing Subsequence의 약자입니다.
이미 O(N^2)으로 저번 장에서 풀었지만, 이번에는 O(NlogN)으로 풀어봅시다.
LIS는 다음과 같은 과정을 거칩니다.

1. 배열의 첫번째 원소를 LIS에 넣습니다.
2. 배열의 두번째 원소부터 순회합니다.
3. 현재 원소가 LIS의 마지막 원소보다 크면 LIS에 넣습니다.
4. 현재 원소가 LIS의 마지막 원소보다 작으면 LIS의 마지막 원소를 현재 원소로 바꿉니다.
5. 2~4를 반복합니다.

입력값으로 배열의 크기 N이 주어집니다.
그리고 임의의 정수 N개가 주어집니다.

배열 내에서 LIS의 길이를 출력하는 프로그램을 작성하세요.

이분탐색을 이용하면 O(NlogN)으로 풀 수 있습니다.
[
    #include <stdio.h>
    #include <algorithm>

    int arr[1000000];
    int lis[1000000];

    int main() {
    	int n, l = 0, r, mid, ans = 0;

    	scanf("%d", &n);
    	for (int i = 0; i < n; i++) {
    		scanf("%d", &arr[i]);
    	}

    	lis[0] = arr[0];
    	for (int i = 1; i < n; i++) {
    		if (lis[ans] < arr[i]) {
    			lis[++ans] = arr[i];
    		}
    		else {
    			l = 0;
    			r = ans;
    			while (l <= r) {
    				mid = (l + r) / 2;
    				if (lis[mid] < arr[i]) {
    					l = mid + 1;
    				}
    				else {
    					r = mid - 1;
    				}
    			}
    			lis[l] = arr[i];
    		}
    	}

    	printf("%d", ans + 1);
    }
]
실행결과는 다음과 같다.
(예를들어
6
10 20 10 30 20 50
를 입력)
4

12.5. 병합정렬 (O(nlogn)) 문제
이진탐색의 경우 배열에서 특정원소를 빠르게 찾을 수 있다고 다뤘습니다.
하지만 이진탐색은 데이터가 정렬되어 있어야 한다는 조건이 갖춰줘야 합니다.

그렇다면 N개의 데이터중에서 K개의 데이터를 찾을때 선형탐색을 사용해서
O(NK)의 시간복잡도를 가지는 알고리즘이 가장 빠를까요?

정렬을 진행하고 이진탐색을 사용한다면 O(NlogN + KlogN)의 시간복잡도로
위의 시간 복잡도 보다 조금더 빠른 알고리즘을 만들 수 있습니다.

이번에는 O(NlogN)정렬중 하나인 병합정렬 알고리즘을 배워보겠습니다.

병합정렬은 다음과 같은 과정을 거칩니다.
1. 배열의 크기가 1이 될때까지 반으로 나눕니다.
2. 배열의 크기가 1이 되면 정렬을 시작합니다.
3. 정렬이 끝나면 다시 합쳐줍니다.

입력값으로 배열의 크기 N이 주어집니다.
그리고 임의의 정수 N개가 주어집니다.

배열을 정렬한 결과를 출력하는 프로그램을 작성하세요.
[
	#include <stdio.h>
	#include <algorithm>

	int arr[1000000];
	int tmp[1000000];

	void merge(int l, int m, int r) {
		int i = l, j = m + 1, k = l;

		while (i <= m && j <= r) {
			if (arr[i] < arr[j]) {
				tmp[k++] = arr[i++];
			}
			else {
				tmp[k++] = arr[j++];
			}
		}

		while (i <= m) {
			tmp[k++] = arr[i++];
		}

		while (j <= r) {
			tmp[k++] = arr[j++];
		}

		for (int i = l; i <= r; i++) {
			arr[i] = tmp[i];
		}
	}

	void mergeSort(int l, int r) {
		if (l < r) {
			int m = (l + r) / 2;
			mergeSort(l, m);
			mergeSort(m + 1, r);
			merge(l, m, r);
		}
	}

	int main() {
		int n;

		scanf("%d", &n);
		for (int i = 0; i < n; i++) {
			scanf("%d", &arr[i]);
		}

		mergeSort(0, n - 1);

		for (int i = 0; i < n; i++) {
			printf("%d ", arr[i]);
		}
	}
]
실행결과는 다음과 같다.
(예를들어
5
5 4 3 2 1
를 입력)
1 2 3 4 5
