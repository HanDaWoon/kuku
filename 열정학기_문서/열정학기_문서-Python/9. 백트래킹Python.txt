9. 백트래킹
백트래킹은 모든 경우의 수를 탐색하는 브루트 포스 알고리즘에 가지치기 기법을 추가한 것입니다.
가지치기란, 해가 될 수 없는 경우를 미리 판단하여 탐색을 진행하지 않는 것을 말합니다.
백트래킹의 간단한 예제들을 풀면서 이해해보겠습니다.
    9.1. 순열 문제
    순열은 n개의 원소 중에서 r개를 중복 없이 뽑아 일렬로 나열하는 것을 말합니다.
    예를 들어, 1, 2, 3, 4, 5 중에서 3개를 뽑아 나열하면 다음과 같은 순열이 나옵니다.
    1 2 3
    1 2 4
    .
    .
    .
    5 4 3
    5 4 2
    (총 60개)

    문제의 입력은 n과 r이며, 출력은 가능한 순열의 조합입니다.
    (단, 1 ≤ r ≤ n ≤ 15)

n, r = map(int, input().split())

visited = [0] * (n+1)
arr = [0] * r


def perm(n, remain):
    if remain == 0:
        for i in range(r):
            print(arr[i], end=' ')
        print()
        return
    
    for i in range(1,n + 1):
        if not visited[i]:
            visited[i] = 1  # 방문 표시
            arr[- remain] = i    
            perm(n, remain - 1)
            visited[i] = 0
    
perm(n, r)
            
    실행결과는 다음과 같습니다.
    입력: 3 2
    1 2
    1 3
    2 1
    2 3
    3 1
    3 2

    9.2. 중복순열 문제
    중복순열은 n개의 원소 중에서 r개를 중복을 허용하여 뽑아 일렬로 나열하는 것을 말합니다.
    예를 들어, 1, 2, 3, 4, 5 중에서 3개를 뽑아 나열하면 다음과 같은 중복순열이 나옵니다.
    1 1 1
    1 1 2
    .
    .
    .
    5 5 4
    5 5 5
    (총 125개)

    문제의 입력은 n과 r이며, 출력은 가능한 중복순열의 조합입니다.
    (단, 1 ≤ r ≤ n ≤ 15)

n, r = map(int, input().split())
arr = [0] * 16

def perm(n, remain):
    if remain == 0:
        for i in range(r):
            print(arr[i], end=' ')
        print()
        return
    for i in range(1, n + 1): # 중복을 허용하기 때문에, visited가 필요 없음
        arr[remain-1] = i   # 
        perm(n, remain - 1)

perm(n, r)
    실행결과는 다음과 같습니다.
    입력: 3 2
    1 1
    1 2
    1 3
    2 1
    2 2
    2 3
    3 1
    3 2
    3 3

    9.3. N-Queen 문제
        N-Queen 문제는 유명한 백트래킹 문제입니다.
        N-Queen 문제는 N*N 크기의 체스판에 N개의 퀸을 서로 공격할 수 없도록 놓는 문제입니다.
        퀸은 가로, 세로, 대각선으로 이동할 수 있기 때문에, 퀸이 서로 공격할 수 없도록 놓으려면
        퀸이 놓인 행과 열, 대각선에는 퀸이 하나씩만 놓여야 합니다.
        N-Queen 문제를 풀기 위해서는, 퀸이 놓인 행과 열, 대각선을 체크하는 배열을 만들어야 합니다.

        입력으로 N이 주어졌을때 N*N 체스판위에서 N개의 퀸을 전부 공격할 수 없게 배치 할 수있는 경우의 수를 구하시오.
        (1 ≤ N < 15)

N = int(input())
count = 0
put = [0]*N
def stage(row, col):
    global count
    if col == N:
        count += 1
        return
    if row == N:
        return
    for i in range(col):
        a = put[i] - row
        a *= a
        b = i - col
        b *= b
        if a== 0 or a == b:    
            stage(row+1, col)
            return

    put[col] = row
    stage(0, col+1)
    stage(row+1, col)

stage(0, 0)
print(count)

        실행결과는 다음과 같습니다.
        (예를 들어 8를 입력)
        92

   9.4. 스도쿠 문제
        스도쿠 문제는 유명한 백트래킹 문제입니다.
        스도쿠 문제는 9*9 크기의 스도쿠 판에 1~9까지의 숫자를 채우는 문제입니다.
        스도쿠 판은 9개의 3*3 크기의 작은 판으로 나뉘어져 있으며, 작은 판 안에는 1~9까지의 숫자가 중복되지 않게 채워져야 합니다.
        또한, 가로, 세로에도 1~9까지의 숫자가 중복되지 않게 채워져야 합니다.
        스도쿠 문제를 풀기 위해서는, 작은 판 안에 1~9까지의 숫자가 채워졌는지 체크하는 배열과
        가로, 세로에 1~9까지의 숫자가 채워졌는지 체크하는 배열을 만들어야 합니다.

        입력으로 스도쿠 판이 주어졌을때, 스도쿠 판을 채우는 방법을 구하시오.
        (1 ≤ N < 15)

sudo = [list(map(int, input().split())) for _ in range(9)]    # 스도쿠 판을 입력받음
prob = [(0, 0)] * 81    # 빈칸의 위치를 저장할 리스트, (행, 열) 형태로 저장 (최대 81개)

# row는 행, col은 열, val은 값(1~9) 
def ispos(row, col, val):   # 3개 모두 지나가면 True, 아니면 False
    for i in range (9):
        if sudo[row][i] == val and i != col:
            return False
        if sudo[i][col] == val and i != row:
            return False
    if row < 3: 
        minr = 0
        maxr = 2
    elif row < 6:
        minr = 3
        maxr = 5
    else:
        minr = 6
        maxr = 8

    if col < 3:
        minc = 0
        maxc = 2
    elif col < 6:
        minc = 3
        maxc = 5
    else:
        minc = 6
        maxc = 8
    for i in range(minr, maxr + 1):     # 작은 판 안에 중복되는 숫자가 있는지 확인
        for j in range (minc, maxc + 1):
            if sudo[i][j] == val and i != row and j != col:  # 자기 자신은 제외
                return False
    return True

endf = False    # 끝났는지 확인하는 변수, 시간 효율을 위함
def solve (stage):  # stage는 현재 스테이지
    global endf
    if stage == len(prob):  # 끝까지 왔으면
        endf = True
        return
    for i in range(1, 10):
        if ispos(prob[stage][0], prob[stage][1], i):    # 여부판단
            sudo[prob[stage][0]][prob[stage][1]] = i    # 1. 값을 일단 대입
            solve(stage+1)  # 2.다음 스테이지로 이동
        if endf:
            return
        sudo[prob[stage][0]][prob[stage][1]] = 0    # 3. 2의 과정에서 값이 다돌면(=길이없으면) 기존의 값을 초기화 후 이전 스테이지로 리턴

tmp=[0, 0]  # 
for i in range(9):
    for j in range(9):
        if sudo[i][j] == 0:
            tmp[0] = i  # 행
            tmp[1] = j  # 열
            prob.append(tmp)
solve(0)

for i in range (9):
    for j in range (9):
        print(sudo[i][j], end = ' ')
    print()
