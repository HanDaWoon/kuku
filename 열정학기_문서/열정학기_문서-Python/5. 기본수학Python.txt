5.1. 산 등반 문제
            M미터 되는 산을 오를때
            하루에 최대 A만큼 올라갈 수 있고,
            무조건 잠을 자기위해 B만큼 내려가 텐트를 친다.
            산 정상에 도착하는데 최소 며칠이 걸리는지 구하시오.
            A, B, M 순으로 입력을 받고 모두 양의 정수이다.
            (0 < A < 100, 0 <= B < A, 0 < M < 8848)
    

                # IDLE로 실행할 시: ctrl+n -> 새로운 파일 생성
                A = int(input("하루 최대 높이: ")) 
                B = int(input("내려가는 높이: "))
                M = int(input("산의 높이: "))   
          # 한번에 입력하기: A, B, M = map(int, input().split())
        
                day = 0   
          # 산 정상에 도달하는데 걸리는 날짜를 저장할 변수 선언
        
                while M <= 0: 
                    M -= A
                    day += 1
                    M += B
                print(day)
                
                # 파일 실행 -> f5 또는 ctrl+f5

5.2. 소수 구하기

        소수(prime number)란 1과 자기자신으로만 나누어 떨어지는 수를 말합니다.


    5.2.1. 소수 판별하기1 O(n^2)
            먼저 우리가 소수를 구하는 방법을 생각해보겠습니다.
            소수는 1과 자기자신으로만 나누어 떨어지는 수이므로
            말 그대로 1과 자기자신을 제외한 사이의 모든 수를
            하나씩 나누어 보고 나누어 떨어지는지 확인하면 됩니다.  
            이를 코드로 표현하면 아래와 같습니다.
    


                n = int(input("소수를 판별할 수: "))
            flag = 1
            for i in range(2, n):
                if n % i == 0:
                    flag = 0
            if flag == 1:
                print("소수입니다.")
            else:
                print("소수가 아닙니다.")
    
    


    5.2.2 소수 판별하기2 O(n*sqrt(n))
            위의 코드는 n이 커질수록 시간이 오래 걸리는 코드입니다.
            왜냐하면 n이 커질수록 2부터 n-1까지의 수를 모두 나누어 봐야 하기 때문입니다.
            그렇다면 n의 제곱근까지만 나누어 봐도 소수를 판별할 수 있지 않을까요?
            이를 코드로 표현하면 아래와 같습니다.
    


                n = int(input("소수를 판별할 수: "))
                flag = 1
                for i in range(2, int(n**0.5)+1):   # n**0.5는 실수이기 떄문에 정수로 변환
                    if n % i == 0:
                        flag = 0
                if flag == 1:
                    print("소수입니다.")
                else:
                    print("소수가 아닙니다.")
    
    
    실행결과는 다음과 같습니다. (예를들어 7을 입력)
    소수입니다. 이 코드는 O(n*sqrt(n))의 시간복잡도를 가지고 있습니다. 기존의 O(n^2)의
    시간복잡도를 가지고 있던 코드보다 *sqrt(n) 만큼의 연산횟수를 줄일 수 있습니다.



    5.2.3 소수 구하기3 O(n*log(log(n)))
            더 빠르면서도 1부터 n까지 모든 수를 소수 판별하는
            획기적인 방법이 있다면 어떨까요?
            이 방법은 에라토스테네스의 체 라는 방법입니다.
            
            에라토스테네스의 체는 다음과 같은 방법으로 소수를 구합니다.
            1. 2부터 n까지의 모든 수를 나열합니다.
            2. 남은 수 중 아직 처리하지 않은 가장 작은 수 i를 찾습니다.
            3. 남은 수 중 i의 배수를 모두 제거합니다.
            4. 더 이상 반복할 수 없을 때까지 2번과 3번의 과정을 반복합니다.
    
    이를 코드로 표현하면 아래와 같습니다.

                n = int(input("n: "))
                array = [True for i in range(n+1)]   # 처음엔 모든 수가 소수(True)인 것으로 초기화(0과 1은 제외)
                for i in range(2, int(n**0.5)+1):   # 2부터 n의 제곱근까지의 모든 수를 확인하며
                    if array[i] == True:   # i가 소수인 경우(남은 수인 경우)
                        j = 2
                        while i * j <= n:   # i를 제외한 i의 모든 배수를 지우기
                            array[i * j] = False
                            j += 1
                for i in range(2, n+1):   # 모든 소수 출력
                    if array[i]:
                        print(i, end=" ")

    
    
    이 코드는 O(n*log(log(n)))의 시간복잡도를 가지고 있습니다.
    기존의 O(n*sqrt(n))의 시간복잡도를 가지고 있던 코드보다 선형O(n)에 가까운 시간복잡도를
    가지고 있습니다. 

    그럼에도 특정 구간의 모든 소수를 구할 수 있기 때문에 많이 사용되는
    방법입니다.


5.3 큰 수의 덧셈
수많은 자료형과 연산자들이 있지만 대부분의 언어는 지정 타입들의 자릿수 한계로 연산의
범위가 제한 되어 있습니다. 하지만 파이썬에서는 이러한 제한이 없습니다.
엄청난 자리수를 연산하는 일은 그다지 많지 않지만 어떤 경우에는 필요할때도 있을
수 있습니다.

    5.3.1. 큰 수의 덧셈
        큰 수의 덧셈을 구현하는 방법은 다음과 같습니다.
        1. 두 수를 문자열로 입력받는다.
        2. 두 수의 길이를 비교하여 짧은 수의 앞에 0을 채운다.
        3. 두 수의 각 자리수를 더한다.
        4. 만약 올림수가 존재한다면 자리수를 올림한다.(올림한 수와 같이 더한다.)
        5. 결과를 출력한다.

    이를 코드로 표현하면 아래와 같습니다.
        <방법 1>
            a, b = map(int, input().split())
            print(a*b)


        < 방법 2>
            a = input("a: ")
            b = input("b: ")
            result = ""  # 결과를 저장할 변수
            carry = 0   # 올림수
            s1 = len(a)
            s2 = len(b)
            while s1 &gt; 0 or s2 &gt; 0:
                if s1 &gt; 0:
                    s1 -= 1
                    carry += int(a[s1])
                    
                if s2 &gt; 0:
                    s2 -= 1
                    carry += int(b[s2])
                result = str(carry % 10) + result
                carry //= 10
            for i in range(s1-1, -1, -1):
                if result[i] == "0":
                    print(result[i:])
                    break
    



    큰 수의 뺼셈
        큰 수의 뺄셈을 구현하는 방법은 다음과 같습니다.
        1. 두 수를 문자열로 입력받는다.
        2. 두 수의 길이를 비교하여 짧은 수의 앞에 0을 채운다.
        3. 두 수의 각 자리수를 뺀다.
        4. 만약 뺀 수가 음수라면 자리수를 내린다.(내린 수와 같이 뺀다.)
        5. 결과를 출력한다.
        이를 코드로 표현하면 아래와 같습니다.


        <방법 1>
            a, b = map(int, input().split())
            print(a-b)




    5.4 OX 퀴즈 문제(8958번)
        Asia Regional - Seoul 2005 A번
        "OOXXOXXOOO"와 같은 OX퀴즈의 결과가 있다.
        O는 문제를 맞은 것이고, X는 문제를 틀린 것이다.
        문제를 맞은 경우 그 문제의 점수는 그 문제까지 연속된 O의 개수가 된다.
        예를 들어, 10번 문제의 점수는 3이 된다.
        예를 들어 "OOXXOXXOOO"의 점수는 1+2+0+0+1+0+0+1+2+3 = 10점이다.
        OX퀴즈의 결과가 주어졌을 때, 점수를 구하는 프로그램을 작성하시오.
        
        OX퀴즈 문제를 풀기 위해서는 다음과 같은 방법을 사용합니다.
        1. OX퀴즈의 결과를 문자열로 입력받는다.
        2. 문자열의 길이만큼 반복문을 돌린다.
        3. 만약 문자열의 i번째가 O라면, cnt를 1 증가시키고, sum에 cnt를 더한다.
        4. 만약 문자열의 i번째가 X라면, cnt를 0으로 초기화한다.
        5. sum을 출력한다.
        (단, 횟수 n은 0 < n < 50, 문자열a의 길이는 0 < a < 100001)

            n = int(input("n: "))
            for i in range(n):
                a = input()
                sum = 0
                cnt = 0
                for j in range(len(a)):
                    if a[j] == "O":
                        cnt += 1
                        sum += cnt
                    else:
                        cnt = 0
                print(sum)


    실행결과는 다음과 같습니다.
            5
            OOXXOXXOOO
            OOXXOOXXOO
            OXOXOXOXOXOXOX
            OOOOOOOOOO
            OOOOXOOOOXOOOOX
            10
            9
            7
            55
            30




    5.5 행렬의 덧셈(2738번)
        행렬의 덧셈과 뺄셈은 행렬의 같은 행, 같은 열의 값을 서로 더하거나 뺀다.
        예를 들어, 2x2 행렬의 덧셈은 다음과 같이 계산한다.
        [1 2] + [3 4] = [4 6]
        [5 6]   [7 8]   [12 14]

        행렬의 덧셈과 뺄셈은 행렬의 크기가 같아야 계산할 수 있기 때문에
        두 행렬의 크기가 같은 경우만 입력으로 주어진다.

        행렬의 행과 열의 주어주고 행렬 a 와 b를 입력받은 후,
        a와 b를 더한 행렬을 출력하는 프로그램을 작성하시오.
        (각 행과 각 열은 1000보다 작고 자연수이다.)
        (행렬a 와 b의 각 원소는 공백으로 구분되어 있고 10억보다 작은 자연수이다.)

        이 문제를 풀기 위해서는 다음과 같은 방법을 사용합니다.
        1. 행렬의 행과 열의 개수를 입력받는다.
        2. 행렬 행과 열의 개수 만큼 a와 b를 입력받는다.
        3. a와 b를 더한 값을 출력한다.

        이 방법을 코드로 표현하면 다음과 같습니다.

            n = int(input("행의 개수: "))
            m = int(input("열의 개수: "))   # n, m = map(int, input().split())
            a = []
            b = []
            for i in range(n):
                a.append(list(map(int, input().split())))   # list로 입력받은 값을 a에 저장
            for i in range(n):
                b.append(list(map(int, input().split())))
            for i in range(n):
                for j in range(m):
                    print(a[i][j] + b[i][j], end=" ")
                print()
                


    실행결과는 다음과 같습니다.
            행의 개수: 2
            열의 개수: 3
            1 2 3
            4 5 6
            1 2 3
            4 5 6
            2 4 6
            8 10 12


    이 코드는 O(n^2)의 시간복잡도를 가지고 있습니다.(n은 행렬의 행과 열의 개수) 이
    코드는 행렬의 행과 열의 개수가 최대 1000 까지 가능합니다.


