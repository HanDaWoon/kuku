1.1. helloworld 출력
대부분의 프로그래밍언어에서는 출력하는 함수가 존재하고, 이를 통해 출력을 할 수 있습니다.
이번에는 [C]언어에서 출력하는 명령어를 알아봅시다.
알고리즘 입문자들은 보통 "Hello World"를 출력하는 프로그램을 작성해보는 것을 시작으로 합니다.
전통에 맞게 helloworld를 출력해보겠습니다. 다음과 같이 작성하고 실행해보세요.

print("Hello World")

실행 결과는 다음과 같습니다.
Hello World

1.2. a = 10, b = 20, a + b 출력
출력의 경우 문자열(문자), 정수, 실수 등을 출력할 수 있습니다.
다음과 같이 작성하고 실행해보세요.

a = 10
b = 20
print("%d + %d = %d" %(a, b, a + b))    # %d는 정수를 출력하는 포맷, %는 포맷을 지정하는 기호

a = 10
b = 20
print("{0} + {1} = {2}".format(a, b, a+b)) # format 함수를 이용한 출력

포맷이란 출력할 때 어떤 형식으로 출력할지를 지정하는 것입니다.

실행 결과는 다음과 같습니다.
10 + 20 = 30

1.3. a = 1.2, b = 2.4, a - b 출력
실수를 출력하는 방법은 다음과 같습니다.
다음과 같이 작성하고 실행해보세요.
a = 1.2
b = 2.4
print("%f - %f = %f" %(a, b, a - b)) # %f는 실수를 출력하는 포맷



실행 결과는 다음과 같습니다.
1.200000 - 2.400000 = -1.200000

1.4. 개행, 탭, 역슬래시, (작은, 큰)따옴표 출력
개행, 탭, 역슬래시, (작은, 큰)따옴표는 입출력할 때 사용되는 특수한 문자들입니다.
그래서 이들을 출력하려하면 다른 것들과 충돌이 일어날 수 있습니다.
그렇다면 이들을 정상 출력하는 방법은 어떻게 될까요?
다음과 같이 작성하고 실행해보세요.

print("개행을 출력하면 \n입니다.\n");
print("탭을 출력하면 \t입니다.\n");
print("역슬래시문자를 출력하면 \\입니다.\n");
print("작은따옴표문자를 출력하면 \'입니다.\n");
print("큰따옴표문자를 출력하면 \"입니다.\n");

실행 결과는 다음과 같습니다.
개행을 출력하면
입니다.
탭을 출력하면     입니다.
역슬래시문자를 출력하면 \입니다.
작은따옴표문자를 출력하면 '입니다.
큰따옴표문자를 출력하면 "입니다.

1.5. 소수점 조절 출력
실수를 출력할 때 소수점 이하 자리수를 조절할 수 있습니다.
다음과 같이 작성하고 실행해보세요.
[
    #include <stdio.h>
    int main(void)
    {
        float a = 1.23456789;
        printf("%f\n", a); // 기본은 소수점 이하 6자리까지 출력합니다.
        printf("%.2f\n", a); // 소수점 이하 2자리까지 출력합니다.
        printf("%.5f\n", a); // 소수점 이하 5자리까지 출력합니다.
        printf("%.9f\n", a); // 소수점 이하 9자리까지 출력합니다.
        return 0;
    }
]
실행 결과는 다음과 같습니다.
1.234568
1.23
1.23457
1.234567890


1.6.1. 문자 입력 받고 출력
다음은 키보드로 부터 입력을 받아서 출력을 해봅시다.
다음과 같이 작성하고 실행해보세요.

python은 문자와 문자열을 구분하지 않습니다.

inp = input() # 키보드로 부터 문자열을 입력받습니다.
print("입력한 문자는 %s 입니다.\n" %(inp)) # 입력받은 문자열을 출력합니다.

실행 결과는 다음과 같습니다.
문자를 입력하세요: (예를들어 a를 입력)
입력한 문자는 a 입니다.



1.7. 정수 입력 받고 출력
정수를 입력 받는 것은 문자를 입력 받는 것과 비슷합니다.
다음과 같이 작성하고 실행해보세요.

inp = int(input("정수를 입력하세요: ")) # 키보드로 부터 정수를 입력받습니다.
print("입력한 정수는 %d 입니다." % (input)) # 입력받은 정수를 출력합니다.

실행 결과는 다음과 같습니다.
정수를 입력하세요: (예를들어 123을 입력)
입력한 정수는 123 입니다.

python의 정수의 입력은 숫자가 아닌 다른 문자가 입력되면 오류가 발생합니다.
8. 실수 입력 받고 출력
실수를 입력 받는 것 역시 문자를 입력 받는 것과 비슷합니다.
다음과 같이 작성하고 실행해보세요.

inp = float(input("실수를 입력하세요: ")) # 키보드로 부터 실수를 입력받습니다.
print("입력한 실수는 %f 입니다." % (input)); # 입력받은 실수를 출력합니다.

실행 결과는 다음과 같습니다.
실수를 입력하세요: (예를들어 123.456을 입력)
입력한 실수는 123.456000 입니다.
실수의 입력은 숫자가 아닌부분까지 입력받습니다.(예를들어 123.456abc를 입력 => 123.456출력)

9. 입력단위를 다르게 입력받고 출력
[
    scanf("???", &변수) 함수는 입력단위를 다양하게 지정할 수 있습니다.
    %d는 정수를 입력받는 입력단위입니다.
        예를들어 123을 입력받을 수 있습니다.

    %f는 실수를 입력받는 입력단위입니다.
        예를들어 123.456을 입력받을 수 있습니다.

    %c는 문자를 입력받는 입력단위입니다.
        예를들어 a를 입력받을 수 있습니다.

    %s는 문자열을 입력받는 입력단위입니다.
        예를들어 abc를 입력받을 수 있습니다.

    %x는 16진수를 입력받는 입력단위입니다. (16진수는 0x로 시작합니다.)
        예를들어 0x123을 입력받을 수 있습니다.

    %o는 8진수를 입력받는 입력단위입니다. (8진수는 0으로 시작합니다.)
        예를들어 0123을 입력받을 수 있습니다.

    %u는 부호없는 정수를 입력받는 입력단위입니다. (부호없는 정수는 음수가 없습니다.)
        예를들어 123을 입력받을 수 있습니다.

    %e는 지수표기법으로 실수를 입력받는 입력단위입니다. (지수표기법은 1.23e4와 같이 e뒤에 지수를 붙입니다.)
        예를들어 1.23e4를 입력받을 수 있습니다. (%e는 항상 ...e...의 형태로 입력해야 합니다.)

    %g는 %f와 %e중 더 짧은것으로 실수를 입력받는 입력단위입니다. (...e...의 형태도 입력받을 수 있습니다.)
        예를들어 123.456을 입력받을 수 있습니다. 
        또한 1.23e4를 입력받을 수 있습니다.
