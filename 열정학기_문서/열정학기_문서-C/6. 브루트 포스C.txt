6. 브루트 포스 알고리즘
단순하게 일어날 수 있는 모든 경우의 수를 대입하여
결과를 도출하는 방법입니다.

6.1. 3N + 1문제
    3N + 1문제는 콜라츠 추측이라고도 불리며,
    가설의 내용은 다음과 같습니다.
    어떤 양의 정수 N에 대하여,
    N이 홀수라면 3N + 1을 하고,
    N이 짝수라면 N을 2로 나눈다고 가정할 때,
    모든 양의 정수 N에 대하여 위의 과정을 반복하면
    결국 1에 도달하게 된다는 추측입니다.

    문제가 간단해보여 직접 계산 하지않고 N에 따라 값을 구하는
    공식이 존재 할것 같지만, 아직까지 값을 구하는 공식이 밝혀지지 않았습니다.

    N을 입력받아 처음 1에 도달할때까지 걸리는 횟수를 출력하시오.

    [
        #include <stdio.h>
        int main() {
            int N;
            scanf("%d", &N);

            int cnt = 0;

            while (N != 1) {            // N이 1이 아닐때까지 반복
                if (N % 2 == 0) {       // N이 짝수일때
                    N /= 2;             // N을 2로 나눔
                }
                else {                  // N이 홀수일때
                    N = 3 * N + 1;      // N = 3N + 1
                }
                cnt++;
            }
            printf("%d", cnt);
            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어 22를 입력)
    15

    여러분들도 N에 따라 값을 구하는 공식을 한번쯤 고민해보는 것은 어떨까요?

6.2. 집합의 부분집합중 합이 0이 있는지 판정하기
    어떤 정수 집합이 주어졌을때, 그 집합의 일부 원소를 선택하여 하나의 집합을
    이룬다면 이를 부분집합이라 합니다.
    이때, 부분집합의 원소들의 합이 0이 되는 부분집합이 존재하는지
    판정하는 문제는 유명한 NP-완전 문제입니다.

    현재까지는 이 문제를 더 빠르게 푸는 방법이 발견되지 않았습니다.
    입력은 다음과 같이 주어집니다.
    첫째 줄에 집합의 크기 N이 주어지고,
    둘째 줄에 N개의 정수 집합이 주어집니다.
    (단, N은 20 이하의 자연수, 집합의 원소는 -1000 이상 1000 이하의 정수)

    [
        #include <stdio.h>
        int main() {
            int N;
            scanf("%d", &N);

            int arr[20];
            for (int i = 0; i < N; i++) {
                scanf("%d", &arr[i]);
            }

            int flag = 0;
            for (int i = 0; i < (1 << N); i++) {     // 부분집합의 개수만큼 반복
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    if (i & (1 << j)) {             // i의 j번째 비트가 1이면
                        sum += arr[j];              // sum에 arr[j]를 더함
                    }
                }
                if (sum == 0) {                     // sum이 0이면
                    flag = 1;                       // flag를 1로 바꿈
                    break;                          // 반복문을 빠져나감
                }
            }
            if (flag) {
                printf("YES");
            }
            else {
                printf("NO");
            }
            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어 5 1 2 3 4 5를 입력)
    YES

    이 문제는 부분집합의 개수만큼 반복문을 돌리는데,
    부분집합의 개수는 2^N개입니다.
    그리고 각 부분집합마다 부분집합의 원소들의 합을 구하는데,
    이때 각 원소를 구하기 위해서는 N번의 비트연산을 해야합니다.
    따라서 이 문제의 시간복잡도는 O(2^N * N)입니다.

6.3. 분해합 문제
Asia Regional - Seoul 2005 B번
어떤 자연수 N이 있을 때,
그 자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합을 의미한다.
어떤 자연수 M의 분해합이 N인 경우, M을 N의 생성자라 한다.
예를 들어, 245의 분해합은 256(=245+2+4+5)이 된다.
따라서 245는 256의 생성자가 된다.
물론, 어떤 자연수의 경우에는 생성자가 없을 수도 있다.
반대로, 생성자가 여러 개인 자연수도 있을 수 있다.
자연수 N이 주어졌을 때, N의 가장 작은 생성자를 구해내는 프로그램을 작성하시오.
(단 1 < N < 1000000 , 답이 존재하지 않으면 0을 출력)

[
    #include <stdio.h>
    int main() {
        int N;
        scanf("%d", &N);

        int flag = 0;
        for (int i = 1; i < N; i++) {
            int sum = i;
            int temp = i;
            while (temp) {
                sum += temp % 10;
                temp /= 10;
            }
            if (sum == N) {
                printf("%d", i);
                flag = 1;
                break;
            }
        }
        if (!flag) {
            printf("0");
        }
        return 0;
    }
]
실행결과는 다음과 같습니다.
(예를들어 216을 입력)
198

이 문제는 1부터 N-1까지의 수를 하나씩 더해가면서
각 수의 분해합이 N이 되는지 확인하는 방법으로 풀었습니다.
이때 각 수의 분해합을 구하기 위해서는 각 자리수를 구해야하는데,
이때 각 자리수를 구하기 위해서는 10으로 나누는 연산을 해야합니다.
따라서 이 문제의 시간복잡도는 O(N * logN)입니다.(logN이 자리수에 가까움)
