4.1. 변수와 상수
이번장에서는 변수와 상수에대해서 알아보겠습니다.
변수는 변하는 수를 의미하고 상수는 변하지 않는 수를 의미합니다.
변수는 값을 변경할 수 있고 상수는 값을 변경할 수 없습니다.
변수와 상수는 다음과 같이 선언합니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 10;             // 변수 선언
        const int b = 20;       // 상수 선언
        printf("%d %d", a, b);

        a = 30;
        //b = 40; //해당 코드는 에러가 발생합니다.
        printf("%d", a);
        return 0;
    }
]
실행결과는 다음과 같습니다.
10 20 30
변수 a는 10에서 30으로 변경가능하지만
상수 b는 20에서 40으로 변경하려고 시도하면 에러가 발생합니다.

[
    추가로 상수는 define을 사용하여 선언할 수 있습니다.
    #include <stdio.h>
    #define PI 3.14     // 상수 선언
    int main(void)
    {
        printf("%f", PI);
        return 0;
    }
]
실행결과는 다음과 같습니다.
3.140000

4.2. 자료형
자료형은 변수의 종류를 의미합니다.
자료형은 다음과 같이 선언합니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 10;             // 정수형 변수 선언
        float b = 3.14;         // 실수형 변수 선언
        char c = 'A';           // 문자형 변수 선언
        printf("%d %f %c", a, b, c);
        return 0;
    }
]
실행결과는 다음과 같습니다.
10 3.140000 A

추가로 int와 비슷한 자료형은 다음과 같습니다.
[
    short int a = 10;           // int보다 작은 정수형 변수 선언
    long int b = 20;            // int보다 큰 정수형 변수 선언
    long long int c = 30;       // long보다 큰 정수형 변수 선언
    unsigned int d = 40;        // unsigned는 부호가 없는 양의 정수만 표현
    unsigned short int e = 50;
    unsigned long int f = 60;
    unsigned long long int g = 70;
]
추가로 float와 비슷한 자료형은 다음과 같습니다.
[
    double a = 3.14;            // float보다 큰 실수형 변수 선언
    long double b = 3.14;       // double보다 큰 실수형 변수 선언
]

4.3. 연산자
4.3.1. 산술연산자
연산자는 변수와 변수를 산술연산하는 기호를 의미합니다.
연산자는 다음과 같이 선언합니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 91;
        int b = 19;
        int c = a + b;      // 덧셈
        int d = a - b;      // 뺄셈
        int e = a * b;      // 곱셈
        int f = a / b;      // 나눗셈
        int g = a % b;      // 나머지
        printf("%d %d %d %d %d", c, d, e, f, g);
        return 0;
    }
]
실행결과는 다음과 같습니다.
110 72 1729 4 15

추가로 다음과 같은 연산자가 있습니다.
해당연산자들은 특정경우에 코드를 간단하게 만들어줍니다.
[
    a += b;     // a = a + b;
    a -= b;     // a = a - b;
    a *= b;     // a = a * b;
    a /= b;     // a = a / b;
    a %= b;     // a = a % b;

    a++;        // a = a + 1;
    a--;        // a = a - 1;
    ++a;        // a = a + 1;
    --a;        // a = a - 1;
]

4.3.2. 비교연산자
비교연산자는 두 변수를 비교하는 연산자입니다.
대개 두 값을 비교하여 참과 거짓(bool)의 형태로 반환합니다.
비교연산자는 다음과 같이 선언합니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 10;
        int b = 20;
        int c = a == b;     // 같다
        int d = a != b;     // 같지 않다
        int e = a > b;      // 크다
        int f = a < b;      // 작다
        int g = a >= b;     // 크거나 같다
        int h = a <= b;     // 작거나 같다
        printf("%d %d %d %d %d %d", c, d, e, f, g, h);
        return 0;
    }
]
실행결과는 다음과 같습니다.
0 1 0 1 0 1

추가로 삼항연산자가 있습니다.
삼항연산자는 다음과 같이 선언합니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 10;
        int b = 20;
        int c = a > b ? a : b;
        // a가 b보다 크면 a를 반환하고 아니면 b를 반환
        printf("%d", c);
        return 0;
    }
]
실행결과는 다음과 같습니다.
20

4.3.3. 논리연산자
논리연산자는 두 변수를 논리적으로 연산하는 연산자입니다.
대개 두 bool값을 연산하여 bool의 형태로 반환합니다.
논리연산자는 다음과 같이 선언합니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 1;          // true
        int b = 0;          // false
        int c = a && b;     // AND 연산 (a와 b가 모두 참일때 참)
        int d = a || b;     // OR 연산 (a와 b중 하나라도 참일때 참)
        int e = !a;         // NOT 연산 (c가 참이면 거짓, 거짓이면 참)
        int f = a ^ b;      // XOR 연산 (a와 b중 하나만 참일때 참)
        printf("%d %d %d %d", c, d, e, f);
        return 0;
    }
]
실행결과는 다음과 같습니다.
0 1 0 1

4.3.4. 비트연산자
-이번장은 변수가 이진수로 저장되는 개념을 이해하고
    읽어보는것을 권장합니다.-
비트연산자는 두 변수를 비트단위로 연산하는 연산자입니다.
대개 두 int값을 연산하여 int의 형태로 반환합니다.

일반적인 정수값들은 2진수(비트)로 저장 됩니다.
그래서 두 값을 각자리의 비트끼리 연산 할수도 있을것입니다.
'두 값의 각자리 비트끼리 연산'의 개념을 사용한것이 비트연산자입니다.
비트연산자는 다음과 같이 선언합니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 10;         // 10은 2진수로 1010
        int b = 12;         // 12은 2진수로 1100
        int c = a & b;      // AND 연산 (a와 b가 모두 1일때 1)
        int d = a | b;      // OR 연산 (a와 b중 하나라도 1일때 1)
        int e = ~a;         // NOT 연산 (a의 비트를 반전)
        int f = a ^ b;      // XOR 연산 (a와 b중 하나만 1일때 1)
        printf("%d %d %d %d", c, d, e, f);
        return 0;
    }
]
실행결과는 다음과 같습니다.
8 14 -11 6 (각 이진수는 1000, 1110, 10101, 0110)
(NOT의 경우 4byte와 2의 보수를 공부하면 이해하기 수월합니다.)

추가로 시프트 연산자도 있습니다.
[
    #include <stdio.h>
    int main(void)
    {
        int a = 10;         // 10은 2진수로 1010
        int b = 12;         // 12은 2진수로 1100
        int c = a << 1;     // a를 왼쪽으로 1비트 이동
        int d = a >> 1;     // a를 오른쪽으로 1비트 이동
        printf("%d %d", c, d);
        return 0;
    }
]
실행결과는 다음과 같습니다.
20 5 (각 이진수는 10100, 101) 

4.4. 함수
함수는 프로그램을 작성할때 가장 중요한 개념입니다.
함수는 특정한 기능을 수행하는 코드의 집합입니다.
함수를 사용하면 코드의 재사용성이 높아지고 유지보수가 쉬워집니다.
함수는 다음과 같이 선언합니다.

반환되는 타입 함수이름(매개변수) {
    함수의 내용
    return 반환값;
}

반환되는 타입은 함수가 반환하는 값의 타입입니다.
매개변수는 함수에 전달되는 값입니다.
함수의 내용은 함수가 수행하는 코드입니다.
return은 함수의 실행을 종료하고 반환값을 반환합니다.

함수는 다음과 같이 사용합니다.
[
    #include <stdio.h>

    int add(int a, int b) {  // 두 정수를 더하는 함수
        return a + b;
    }

    int main(void)
    {
        int a = 10;
        int b = 20;

        int c = add(a, b);  // add 함수를 호출

        printf("%d", c);
        return 0;
    }
]
실행결과는 다음과 같습니다.
30

4.4.1. 함수의 반환되는 타입
함수의 반환되는 타입에는 다음과 같은 것들이 있습니다.
[
    void : 반환되는 값이 없는 경우
    int : 정수를 반환하는 경우
    float : 실수를 반환하는 경우
    char : 문자를 반환하는 경우
    char* : 문자열을 반환하는 경우      // *는 포인터의 개념을 사용합니다.
    int* : 정수 배열을 반환하는 경우
    float* : 실수 배열을 반환하는 경우
    char** : 문자열 배열을 반환하는 경우

    함수의 매개변수에도 'void를 제외한' 위와 같은 타입들이 사용됩니다.
    반환이 없는 void를 제외하고는 모두 return문을 사용해서
    지정된 타입의 값을 반환해야 합니다.
]

4.4.2. 1부터 k까지 합을 구하는 함수sum(k)를 사용하여 sum(1)부터 sum(n)까지 합을 구하기
[
    #include <stdio.h>

    int sum(int k) {  // 1부터 k까지 합을 구하는 함수
        int s = 0;
        for (int i = 1; i <= k; i++) {
            s += i;
        }
        return s;
    }

    int main(void)
    {
        int n;
        scanf("%d", &n);

        int s = 0;
        for (int i = 1; i <= n; i++) {  // sum(1)부터 sum(n)까지 합을 구합니다.
            s += sum(i);
        }

        printf("%d", s);
        return 0;
    }
]
실행결과는 다음과 같습니다.
(예를 들어 n = 5이라고 입력하면)
35 ( == 1 + 3 + 6 + 10 + 15)
