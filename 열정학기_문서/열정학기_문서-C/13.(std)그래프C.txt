13. 그래프
그래프(graph)는 정점(vertex)와 간선(edge)으로 구성된 자료구조이다.
정점은 노드(node)라고도 하며, 간선은 노드를 연결하는 선이다.
간선은 방향성이 있을 수도 있고 없을 수도 있다.(방향, 무방향)
간선에는 가중치(weight)가 있을 수도 있고 없을 수도 있다.
간선에 가중치가 있으면 가중치 그래프(weighted graph)라고 한다.
간선에 가중치가 없으면 비가중치 그래프(unweighted graph)라고 한다.
간선에 방향이 있으면 방향 그래프(directed graph)라고 한다.
간선에 방향이 없으면 무방향 그래프(undirected graph)라고 한다.

13.1. 그래프의 종류
    13.1.1. 2차원 배열로 표현
    2차원 배열로 그래프를 구현을 다루어 봤었습니다.
    이번 장에서는 조금 더 자세하고 정확하게 그래프를 구현하는 방법을 알아보겠습니다.
    2차원 배열에서 그래프를 표현할때는 행의 인덱스가 시작점이고
    열의 인덱스가 도착점이 되는 간선을 대항 행렬에 저장하여 표현합니다.

    가중치 방향 그래프를 행렬로 표현하면 다음과 같습니다.
    입력은 N을 정점의 개수로 받고, M을 간선의 개수로 받습니다.
    그리고 간선은 시작점, 도착점, 가중치 순서로 입력을 받습니다.
    
    이를 이차원 배열로 출력하시오.

    [
        #include <stdio.h>

        int main(){
            int N, M;
            int i, j;
            int a, b, c;
            int map[100][100] = {0, };

            scanf("%d %d", &N, &M);

            for(i=0; i<M; i++){
                scanf("%d %d %d", &a, &b, &c);
                map[a][b] = c;
            }

            for(i=1; i<=N; i++){
                for(j=1; j<=N; j++){
                    printf("%d ", map[i][j]);
                }
                printf("\n");
            }

            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어
    5 6
    1 2 1
    1 3 2
    1 4 3
    2 4 4
    3 4 5
    4 5 6
    을 입력)
    0 1 2 3 0
    0 0 0 4 0
    0 0 0 5 0
    0 0 0 0 6
    0 0 0 0 0

    이때 무방향 그래프인 경우는 대각선 우상과 좌하를 대칭으로 기입하여 표현 가능합니다.
    (0 1 2 3 0)
    (1 0 0 4 0)
    (2 0 0 5 0)
    (3 4 5 0 6)
    (0 0 0 6 0)
    또한 가중치가 없는 경우는 1로 표현 가능 합니다.
    (0 1 1 1 0)
    (1 0 0 1 0)
    (1 0 0 1 0)
    (1 1 1 0 1)
    (0 0 0 1 0)

    13.1.2. 인접 리스트로 표현
    위의 2차원 배열은 그래프를 표현할때 직관적인 방법으로 자주 사용됩니다.
    하지만 그래프의 정점이 많은데 비해 간선이 적은 경우는 2차원 배열에 값이 0인 부분
    즉, 빈공간이 많아 메모리 낭비가 심합니다.

    인접리스트는 정점의 개수만큼 리스트를 만들고(이는 2차원 배열의 행과 같습니다.)
    각 리스트에는 연결된 정점들을 저장합니다.(이는 2차원 배열의 열과 같습니다.)

    저장하는 방법은 시작점을 인덱스로 한 리스트에 도착점과 가중치를 세트로 저장하는 방법을 사용합니다.

    가중치 방향 그래프를 행렬로 표현하면 다음과 같습니다.
    입력은 N을 정점의 개수로 받고, M을 간선의 개수로 받습니다.
    그리고 간선은 시작점, 도착점, 가중치 순서로 입력을 받습니다.
    
    이를 인접리스트 방식으로 출력하시오.

    [
        #include <stdio.h>
        #include <stdlib.h>

        typedef struct node{
            int vertex;
            int weight;
            struct node *next;
        }Node;

        int main(){
            int N, M;
            int i, j;
            int a, b, c;
            Node *map[100] = {NULL, };

            scanf("%d %d", &N, &M);

            for(i=0; i<M; i++){
                scanf("%d %d %d", &a, &b, &c);
                Node *newNode = (Node*)malloc(sizeof(Node));
                newNode->vertex = b;
                newNode->weight = c;
                newNode->next = map[a];
                map[a] = newNode;
            }

            for(i=1; i<=N; i++){
                Node *cur = map[i];
                printf("%d : ", i);
                while(cur != NULL){
                    printf("%d(%d) ", cur->vertex, cur->weight);
                    cur = cur->next;
                }
                printf("\n");
            }

            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어
    5 6
    1 2 1
    1 3 2
    1 4 3
    2 4 4
    3 4 5
    4 5 6
    을 입력)
    1 : 4(3) 3(2) 2(1)
    2 : 4(4)
    3 : 4(5)
    4 : 5(6)
    5 :

    13.2. 그래프의 순회
    그래프의 순회는 그래프의 모든 정점을 한번씩 방문하는 것을 말합니다.
    그래프의 순회에는 깊이우선탐색(Depth First Search)과 너비우선탐색(Breadth First Search)이 있습니다.
    깊이 우선 탐색과 너비 우선 탐색을 이용하여 그래프를 순회하는 방법을 알아보겠습니다.

    13.2.1. 깊이 우선 탐색(DFS)
    깊이 우선 탐색은 그래프의 정점을 탐색할 때,
    한 정점에서 갈 수 있는 정점으로 깊이 들어가면서 탐색하는 방법입니다.
    그래프를 순회할때 더 이상 갈곳이 없을때까지 깊이 들어가면서 탐색하고
    더 이상 갈곳이 없으면 다시 돌아와서 다른 정점으로 탐색하는 방법입니다.

    깊이 우선 탐색은 지나가는 곳을 스택(Last In First Out)의 구조체에 저장하고
    다시 돌아올때는 스택에서 꺼낸 값으로 돌아가는 방식으로 구현합니다.

    또한 깊이 우선 탐색은 재귀함수를 이용하여 구현할 수 있습니다.
    (동일하게 Last IN First Out의 형태 이기 때문)

    깊이 우선 탐색을 재귀로 구현하면 다음과 같습니다.
    [
        #include <stdio.h>
        #include <stdlib.h>

        typedef struct node{
            int vertex;
            struct node *next;
        }Node;

        int visited[100] = {0, };

        void DFS(Node *map[], int v){
            Node *cur = map[v];
            visited[v] = 1;
            printf("%d ", v);
            while(cur != NULL){
                if(visited[cur->vertex] == 0){
                    DFS(map, cur->vertex);
                }
                cur = cur->next;
            }
        }

        int main(){
            int N, M;
            int i, j;
            int a, b, c;
            Node *map[100] = {NULL, };

            scanf("%d %d", &N, &M);

            for(i=0; i<M; i++){
                scanf("%d %d", &a, &b);
                Node *newNode = (Node*)malloc(sizeof(Node));
                newNode->vertex = b;
                newNode->next = map[a];
                map[a] = newNode;
            }

            DFS(map, 1);

            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어
    5 6
    1 2
    1 3
    1 4
    2 4
    3 4
    4 5
    을 입력)
    1 4 5 3 2

    13.2.2. 너비 우선 탐색(BFS)
    너비 우선 탐색은 그래프의 정점을 탐색할 때,
    한 정점에서 갈 수 있는 정점으로 너비를 넓혀가면서 탐색하는 방법입니다.
    그래프를 순회할때 더 이상 갈곳이 없을때까지 너비를 넓혀가면서 탐색하고
    더 이상 갈곳이 없으면 다시 돌아와서 다른 정점으로 탐색하는 방법입니다.

    너비 우선 탐색은 지나가는 곳을 큐(First In First Out)의 구조체에 저장하고
    다시 돌아올때는 큐에서 꺼낸 값으로 돌아가는 방식으로 구현합니다.

    너비 우선 탐색을 큐로 구현하면 다음과 같습니다.
    [
        #include <stdio.h>
        #include <stdlib.h>

        typedef struct node{
            int vertex;
            struct node *next;
        }Node;

        typedef struct queue{
            int vertex;
            struct queue *next;
        }Queue;

        int visited[100] = {0, };

        void BFS(Node *map[], int v){
            Queue *head = NULL;
            Queue *tail = NULL;
            Queue *cur = NULL;
            Queue *newNode = NULL;
            Node *curNode = NULL;

            newNode = (Queue*)malloc(sizeof(Queue));
            newNode->vertex = v;
            newNode->next = NULL;
            head = newNode;
            tail = newNode;

            while(head != NULL){
                cur = head;
                head = head->next;
                if(head == NULL){
                    tail = NULL;
                }
                if(visited[cur->vertex] == 0){
                    visited[cur->vertex] = 1;
                    printf("%d ", cur->vertex);
                    curNode = map[cur->vertex];
                    while(curNode != NULL){
                        if(visited[curNode->vertex] == 0){
                            newNode = (Queue*)malloc(sizeof(Queue));
                            newNode->vertex = curNode->vertex;
                            newNode->next = NULL;
                            if(head == NULL){
                                head = newNode;
                                tail = newNode;
                            }else{
                                tail->next = newNode;
                                tail = newNode;
                            }
                        }
                        curNode = curNode->next;
                    }
                }
                free(cur);
            }
        }

        int main(){
            int N, M;
            int i, j;
            int a, b, c;
            Node *map[100] = {NULL, };

            scanf("%d %d", &N, &M);

            for(i=0; i<M; i++){
                scanf("%d %d", &a, &b);
                Node *newNode = (Node*)malloc(sizeof(Node));
                newNode->vertex = b;
                newNode->next = map[a];
                map[a] = newNode;
            }

            BFS(map, 1);

            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어
    5 6
    1 2
    1 3
    1 4
    2 4
    3 4
    4 5
    을 입력)
    1 4 3 2 5

    13.3. 한 붓 그리기 문제
    한 붓 그리기 문제는 정해진 그림을 그리는데 붓을 떼지않고 한번에 그려야하는 문제입니다.

    한 붓 그리기를 그래프 순회로 풀어봅시다.
    입력으로 그림의 점의 개수 N과 선의 개수 M이 주어지고
    다음 M개의 줄에는 선의 시작점과 끝점이 주어집니다.
    주어진 그림(그래프)을 한붓으로 그릴 수 있으면 YES를 출력하고
    그릴 수 없으면 NO를 출력하는 프로그램을 작성하세요.

    [
        #include <stdio.h>
        #include <stdlib.h>

        typedef struct node{
            int vertex;
            struct node *next;
        }Node;

        int visited[100] = {0, };

        void DFS(Node *map[], int v){
            Node *cur = map[v];
            visited[v] = 1;
            while(cur != NULL){
                if(visited[cur->vertex] == 0){
                    DFS(map, cur->vertex);
                }
                cur = cur->next;
            }
        }

        int main(){
            int N, M;
            int i, j;
            int a, b, c;
            Node *map[100] = {NULL, };

            scanf("%d %d", &N, &M);

            for(i=0; i<M; i++){
                scanf("%d %d", &a, &b);
                Node *newNode = (Node*)malloc(sizeof(Node));
                newNode->vertex = b;
                newNode->next = map[a];
                map[a] = newNode;
            }

            DFS(map, 1);

            for(i=1; i<=N; i++){
                if(visited[i] == 0){
                    printf("NO");
                    return 0;
                }
            }
            printf("YES");

            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어
    5 4
    1 2
    2 3
    3 4
    4 5
    을 입력)
    YES

    13.4. 미로탐색 문제
    미로탐색 문제는 미로를 탐색하는 문제입니다.
    미로의 크기 N과 M이 주어지고
    다음 N*M개의 줄에는 미로의 정보가 주어집니다.
    미로의 정보는 갈수있는 길은 1, 갈수없는 길(벽)은 0으로 주어집니다.
    미로의 시작점은 (1, 1)이고 미로의 출구는 (N, M)입니다.

    미로를 탈출하기 위해 움직여야하는 최소 칸의 개수를 출력하는 프로그램을 작성하세요.

    [
        #include <stdio.h>
        #include <queue>
        using namespace std;

        int graph[100][100] = { 0 };
        queue<pair<int, int>> qu;

        int macro(int x, int y, int N, int M, int count) {
        	if ((x >= 0 && x < N) && (y >= 0 && y < M)) {
        		if (graph[x][y] == 1) {
        			qu.push({ x, y });
        			graph[x][y] = count + 1;
        			return 1;
        		}
        	}
        	return 0;
        }

        int BFS(int x, int y, int N, int M) {
        	if (x == N - 1 && y == M - 1) {
        		return graph[x][y];
        	}

        	int count = graph[x][y];
        	int do_count = 0;

        	do_count += macro(x - 1, y, N, M, count);
        	do_count += macro(x + 1, y, N, M, count);
        	do_count += macro(x, y - 1, N, M, count);
        	do_count += macro(x, y + 1, N, M, count);

        	for (int i = 0; i < do_count; i++) {
        		pair<int, int> a = qu.front();
        		qu.pop();

        		int out = BFS(a.first, a.second, N, M);
        		if (out != 0) {
        			return out;
        		}
        	}
        	return 0;
        }

        int main() {
        	int N, M;
        	scanf("%d %d", &N, &M);
        	for (int i = 0; i < N; i++) {
        		for (int j = 0; j < M; j++){
        			scanf("%1d", &graph[i][j]);
        		}
        	}

        	graph[0][0] = 2;
        	int out = BFS(0, 0, N, M);
        	printf("%d", out - 1);
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어
    5 6
    101010
    111111
    000001
    111111
    111111
    을 입력)
    10

13.5. 트리
    트리는 그래프의 일종으로 노드와 간선으로 이루어진 자료구조입니다.
    노드는 트리에서 데이터를 저장하는 기본요소입니다.
    간선은 노드와 노드를 연결하는 선으로 트리의 구조를 잡아줍니다.

    트리는 루트 노드, 부모 노드, 자식 노드, 단말 노드, 형제 노드 등의 용어를 사용합니다.

    루트 노드는 트리 구조에서 최상위에 있는 노드입니다.
    부모 노드는 어떤 노드의 바로 위에 연결된 노드를 의미합니다.
    자식 노드는 어떤 노드의 바로 아래에 연결된 노드를 의미합니다.
    단말 노드는 자식 노드가 없는 노드를 의미합니다.
    형제 노드는 같은 부모를 가진 노드를 의미합니다.

    트리는 다음과 같은 특징을 가집니다.
    1. 트리는 사이클이 존재하지 않습니다.
    2. 임의의 노드에서 어떤 노드로 가는 경로는 반드시 존재하며 단 하나의 길만 존재합니다.
    3. 트리는 그래프의 일종이기 때문에 비연결 그래프가 될 수 있습니다.

    13.5.1. 연결리스트로 트리 구현하기
        연결리스트로 트리를 구현하고 루트를 1로 왼쪽은 *2한 값을,
        오른쪽은 +2한 값을 가지는 트리를 만들어보겠습니다.

        연결리스트로 트리를 구현하는 방법은 다음과 같습니다.
        [
            #include <stdio.h>
            #include <stdlib.h>

            struct Node {
            	int data;
            	Node* left;
            	Node* right;
            };

            Node* newNode(int data) {
            	Node* node = (Node*)malloc(sizeof(Node));
            	node->data = data;
            	node->left = NULL;
            	node->right = NULL;
            	return node;
            }

            int main() {
            	Node* root = newNode(1);
            	root->left = newNode(2);
            	root->right = newNode(3);
            	root->left->left = newNode(4);
            	root->left->right = newNode(4);
                root->right->left = newNode(6);
                root->right->right = newNode(5);
            }
        ]

    13.5.2. 배열로 트리 구현하기
        배열로 트리를 구현하고 루트를 1로 왼쪽은 *2한 값을,
        오른쪽은 +2한 값을 가지는 트리를 만들어보겠습니다.

        배열로 트리를 구현하는 방법은 다음과 같습니다.
        [
            #include <stdio.h>

            int tree[100];

            int main() {
            	tree[1] = 1;                // root == 1
            	tree[1 * 2] = 2;            // left child == 2
            	tree[1 * 2 + 1] = 3;        // right child == 3
            	tree[1 * 2 * 2] = 4;        // left child of left child == 4
            	tree[1 * 2 * 2 + 1] = 4;    // right child of left child == 5
            	tree[(1 * 2 + 1) * 2] = 6;  // left child of right child == 6
                tree[(1 * 2 + 1) * 2 + 1] = 5;  // right child of right child == 7
            }

            for(int i = 1; i <= 7; i++) {
            	printf("%d ", tree[i]);
            }
        ]
        실행 결과는 다음과 같습니다.
        1 2 3 4 4 6 5

13.6. 트리의 순회
트리의 순회는 트리의 모든 노드를 한 번씩 방문하는 것을 의미합니다.
트리의 순회는 다음과 같은 방법으로 이루어집니다.
1. 전위 순회
2. 중위 순회
3. 후위 순회

13.6.1. 전위 순회
    전위 순회는 루트를 먼저 방문하고 왼쪽 자식을 방문한 후 오른쪽 자식을 방문하는 방법입니다.
    [
        #include <stdio.h>
        #include <stdlib.h>

        struct Node {
        	int data;
        	Node* left;
        	Node* right;
        };

        Node* newNode(int data) {
        	Node* node = (Node*)malloc(sizeof(Node));
        	node->data = data;
        	node->left = NULL;
        	node->right = NULL;
        	return node;
        }

        void preorder(Node* root) {             // 전위 순회는 실행부가 나오고 좌우를 분할
        	if (root == NULL) return;
        	printf("%d ", root->data);
        	preorder(root->left);
        	preorder(root->right);
        }

        int main() {
        	Node* root = newNode(1);
        	root->left = newNode(2);
        	root->right = newNode(3);
        	root->left->left = newNode(4);
        	root->left->right = newNode(5);
        	root->right->left = newNode(6);
        	root->right->right = newNode(7);
        	preorder(root);
            return 0;
        }
    ]
    실행 결과는 다음과 같습니다.
    1 2 4 5 3 6 7

    DFS와 전위순회는 유사한 방법으로 움직인다는 것을 느낄수 있습니다.

13.6.2. 중위 순회
    중위 순회는 왼쪽 자식을 먼저 방문하고 루트를 방문한 후 오른쪽 자식을 방문하는 방법입니다.
    [
        #include <stdio.h>
        #include <stdlib.h>

        struct Node {
        	int data;
        	Node* left;
        	Node* right;
        };

        Node* newNode(int data) {
        	Node* node = (Node*)malloc(sizeof(Node));
        	node->data = data;
        	node->left = NULL;
        	node->right = NULL;
        	return node;
        }

        void inorder(Node* root) {              // 중위 순회는 좌를 분할하고 실행부가 나오고 우를 분할
        	if (root == NULL) return;
        	inorder(root->left);
        	printf("%d ", root->data);
        	inorder(root->right);
        }

        int main() {
        	Node* root = newNode(1);
        	root->left = newNode(2);
        	root->right = newNode(3);
        	root->left->left = newNode(4);
        	root->left->right = newNode(5);
        	root->right->left = newNode(6);
        	root->right->right = newNode(7);
        	inorder(root);
            return 0;
        }
    ]
    실행 결과는 다음과 같습니다.
    4 2 5 1 6 3 7

13.6.3. 후위 순회
    후위 순회는 왼쪽 자식을 먼저 방문하고 오른쪽 자식을 방문한 후 루트를 방문하는 방법입니다.
    [
        #include <stdio.h>
        #include <stdlib.h>

        struct Node {
        	int data;
        	Node* left;
        	Node* right;
        };

        Node* newNode(int data) {
        	Node* node = (Node*)malloc(sizeof(Node));
        	node->data = data;
        	node->left = NULL;
        	node->right = NULL;
        	return node;
        }

        void postorder(Node* root) {            // 후위 순회는 좌우를 분할하고 실행부가 나옴
        	if (root == NULL) return;
        	postorder(root->left);
        	postorder(root->right);
        	printf("%d ", root->data);
        }

        int main() {
        	Node* root = newNode(1);
        	root->left = newNode(2);
        	root->right = newNode(3);
        	root->left->left = newNode(4);
        	root->left->right = newNode(5);
        	root->right->left = newNode(6);
        	root->right->right = newNode(7);
        	postorder(root);
            return 0;
        }
    ]
    실행 결과는 다음과 같습니다.
    4 5 2 6 7 3 1

13.7. 트리의 지름구하기 문제
https://www.acmicpc.net/problem/1167
트리의 지름이란, 트리에서 임의의 두 점 사이의 거리 중 가장 긴 것을 말한다.
트리의 지름을 구하는 프로그램을 작성하시오.

트리가 입력으로 주어진다.
먼저 첫 번째 줄에서는 트리의 정점의 개수 V가 주어지고 (2 ≤ V ≤ 100,000)
둘째 줄부터 V개의 줄에 걸쳐 간선의 정보가 다음과 같이 주어진다. 정점 번호는 1부터 V까지 매겨져 있다.

먼저 정점 번호가 주어지고, 이어서 연결된 간선의 정보를 의미하는 정수가 두 개씩 주어지는데,
하나는 정점번호, 다른 하나는 그 정점까지의 거리이다.
예를 들어 네 번째 줄의 경우 정점 3은 정점 1과 거리가 2인 간선으로 연결되어 있고,
정점 4와는 거리가 3인 간선으로 연결되어 있는 것을 보여준다. 각 줄의 마지막에는 -1이 입력으로 주어진다.
주어지는 거리는 모두 10,000 이하의 자연수이다.

첫째 줄에 트리의 지름을 출력한다.
[
    #include <stdio.h>
    #include <vector>
    #include <queue>
    using namespace std;

    vector<pair<int, int>>* graph;
    queue<int> qu;
    int* visit;

    int BFS(int index) {
    	int maxid = index;
    	for (int i = 0; i < graph[index].size(); i++) {
            int next = graph[index][i].first;
    		if (visit[next] == -1) {
    			visit[next] = visit[index] + graph[index][i].second;
    			qu.push(next);
    		}
    	}

    	while (!qu.empty()) {
    		int next = qu.front();
    		qu.pop();
    		int out = BFS(next);
    		maxid = visit[out] > visit[index] ? out : index;
    	}
    	return maxid;
    }

    int main() {
    	int N, x, y, z;
    	scanf("%d", &N);
    	graph = new vector<pair<int, int>>[N + 1];
    	visit = new int[N + 1];

    	for (int i = 0; i < N; i++) {
    		scanf("%d", &x);
    		while (scanf("%d", &y), y != -1) {
    			scanf("%d", &z);
    			graph[x].push_back({ y, z });
    		}
    	}

    	fill(visit, visit + N + 1, -1);
    	visit[1] = 0;
    	int start = BFS(1);

    	fill(visit, visit + N + 1, -1);
    	visit[start] = 0;
    	printf("%d", visit[BFS(start)]);
    }
]
실행결과는 다음과 같습니다.
(예를들어
5
1 3 2 -1
2 4 4 -1
3 1 2 4 3 -1
4 2 4 3 3 5 6 -1
5 4 6 -1
을 입력)
11
