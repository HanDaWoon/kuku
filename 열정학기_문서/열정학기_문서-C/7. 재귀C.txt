7. 재귀
함수는 input과 output이 나오는 방식입니다.
그렇다면 함수(바깥)안에 함수(안)를 넣어
함수(안)를 사용하여 함수(바깥)의 결과를
도출한다면 어떻게 될까요?

    7.1. 팩토리얼 구하기
    재귀함수를 이용하여 팩토리얼을 구해봅시다.
    팩토리얼은 1부터 n까지의 수를 곱한 것입니다.

    [
        #include <stdio.h>
        int factorial(int n) {
            if (n == 1)
                return 1;
            else
                return n * factorial(n - 1);
        }
        int main() {
            int n;
            scanf("%d", &n);
            printf("%d", factorial(n));
            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어 5를 입력)
    120

    7.2. 이분 탐색 문제
    이분 탐색은 정렬된 배열에서 특정한 값을 선형탐색보다
    더 빠르게 찾는 알고리즘입니다.
    이분 탐색은 배열의 중간값을 찾고, 찾고자 하는 값과
    중간값을 비교하여 찾고자 하는 값이 중간값보다 작으면
    중간값의 왼쪽을, 크면 중간값의 오른쪽을 다시 탐색하는
    방식입니다.

    이분 탐색을 재귀함수를 이용하여 구현해봅시다.

    [
        #include <stdio.h>
        int BS(int arr[], int start, int end, int target)
        {
            if (start > end){
                return -1;
            }

            int mid = (start + end) / 2;

            if (arr[mid] == target){
                return mid;
            }
            else if (arr[mid] > target){
                return BS(arr, start, mid - 1, target);
            }
            else{
                return BS(arr, mid + 1, end, target);
            }
        }
        int main()
        {
            int arr[10] = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 };
            int target = 7;
            int n = sizeof(arr) / sizeof(int);

            int result = BS(arr, 0, n - 1, target);

            if (result == -1)
                printf("원소가 존재하지 않습니다.");
            else
                printf("%d번째 원소입니다.", result + 1);

            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    4번째 원소입니다.

    7.3. 하노이 탑 문제
    하노이 탑은 3개의 기둥과 n개의 원반으로 이루어져 있습니다.
    원반은 작은 원반 위에 큰 원반을 놓을 수 없습니다.
    이때, n개의 원반을 1번 기둥에서 3번 기둥으로 옮기는
    방법을 구해봅시다.

    [
        #include <stdio.h>
        int cnt = 0;
        void hanoi(int n, int from, int by, int to)
        {
            if (n == 1) {
                cnt++;
                printf("%d번 기둥에서 %d번 기둥으로 원반을 옮깁니다.\n", from, to);
            }
            else {
                hanoi(n - 1, from, to, by);
                cnt++;
                printf("%d번 기둥에서 %d번 기둥으로 원반을 옮깁니다.\n", from, to);

                hanoi(n - 1, by, from, to);
            }
        }
        int main() {
            int n;
            scanf("%d", &n);
            hanoi(n, 1, 2, 3);
            printf("%d개의 원반을 옮기는데 %d번 움직였습니다.", n, cnt);
            return 0;
        }
    ]
    실행결과는 다음과 같습니다.
    (예를들어 3을 입력)
    1번 기둥에서 3번 기둥으로 원반을 옮깁니다.
    1번 기둥에서 2번 기둥으로 원반을 옮깁니다.
    3번 기둥에서 2번 기둥으로 원반을 옮깁니다.
    1번 기둥에서 3번 기둥으로 원반을 옮깁니다.
    2번 기둥에서 1번 기둥으로 원반을 옮깁니다.
    2번 기둥에서 3번 기둥으로 원반을 옮깁니다.
    1번 기둥에서 3번 기둥으로 원반을 옮깁니다.
    3개의 원반을 옮기는데 7번 움직였습니다.
